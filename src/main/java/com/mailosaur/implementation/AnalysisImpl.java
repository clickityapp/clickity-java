/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.mailosaur.implementation;

import retrofit2.Retrofit;
import com.mailosaur.Analysis;
import com.google.common.reflect.TypeToken;
import com.mailosaur.MailosaurException;
import com.mailosaur.models.SpamCheckResult;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Analysis.
 */
public class AnalysisImpl implements Analysis {
    /** The Retrofit service to perform REST calls. */
    private AnalysisService service;
    /** The service client containing this operation class. */
    private MailosaurBaseClientImpl client;

    /**
     * Initializes an instance of Analysis.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public AnalysisImpl(Retrofit retrofit, MailosaurBaseClientImpl client) {
        this.service = retrofit.create(AnalysisService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Analysis to be
     * used by Retrofit to perform actually REST calls.
     */
    interface AnalysisService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Analysis spam" })
        @GET("api/analysis/spam/{email}")
        Observable<Response<ResponseBody>> spam(@Path("email") UUID email);

    }

    /**
     * Perform a spam check.
     * Perform a spam analysis on the specified email.
     *
     * @param email The identifier of the email to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SpamCheckResult object if successful.
     */
    public SpamCheckResult spam(UUID email) {
        return spamWithServiceResponseAsync(email).toBlocking().single().body();
    }

    /**
     * Perform a spam check.
     * Perform a spam analysis on the specified email.
     *
     * @param email The identifier of the email to be analyzed.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SpamCheckResult> spamAsync(UUID email, final ServiceCallback<SpamCheckResult> serviceCallback) {
        return ServiceFuture.fromResponse(spamWithServiceResponseAsync(email), serviceCallback);
    }

    /**
     * Perform a spam check.
     * Perform a spam analysis on the specified email.
     *
     * @param email The identifier of the email to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SpamCheckResult object
     */
    public Observable<SpamCheckResult> spamAsync(UUID email) {
        return spamWithServiceResponseAsync(email).map(new Func1<ServiceResponse<SpamCheckResult>, SpamCheckResult>() {
            @Override
            public SpamCheckResult call(ServiceResponse<SpamCheckResult> response) {
                return response.body();
            }
        });
    }

    /**
     * Perform a spam check.
     * Perform a spam analysis on the specified email.
     *
     * @param email The identifier of the email to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SpamCheckResult object
     */
    public Observable<ServiceResponse<SpamCheckResult>> spamWithServiceResponseAsync(UUID email) {
        if (email == null) {
            throw new IllegalArgumentException("Parameter email is required and cannot be null.");
        }
        return service.spam(email)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SpamCheckResult>>>() {
                @Override
                public Observable<ServiceResponse<SpamCheckResult>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SpamCheckResult> clientResponse = spamDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SpamCheckResult> spamDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<SpamCheckResult, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<SpamCheckResult>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

}
