/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.mailosaur.implementation;

import retrofit2.Retrofit;
import com.mailosaur.Servers;
import com.google.common.reflect.TypeToken;
import com.mailosaur.MailosaurException;
import com.mailosaur.models.Server;
import com.mailosaur.models.ServerCreateOptions;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Random;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Servers.
 */
public class ServersImpl implements Servers {
    /** The Retrofit service to perform REST calls. */
    private ServersService service;
    /** The service client containing this operation class. */
    private MailosaurBaseClientImpl client;

    /**
     * Initializes an instance of Servers.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ServersImpl(Retrofit retrofit, MailosaurBaseClientImpl client) {
        this.service = retrofit.create(ServersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Servers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ServersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Servers list" })
        @GET("api/servers")
        Observable<Response<ResponseBody>> list();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Servers create" })
        @POST("api/servers")
        Observable<Response<ResponseBody>> create(@Body ServerCreateOptions serverCreateOptions);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Servers get" })
        @GET("api/servers/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") String id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Servers update" })
        @PUT("api/servers/{id}")
        Observable<Response<ResponseBody>> update(@Path("id") String id, @Body Server server);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Servers delete" })
        @HTTP(path = "api/servers/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("id") String id);

    }

    /**
     * List all servers.
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in alphabetical order.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Server&gt; object if successful.
     */
    public List<Server> list() {
        return listWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all servers.
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in alphabetical order.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Server>> listAsync(final ServiceCallback<List<Server>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all servers.
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in alphabetical order.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Server&gt; object
     */
    public Observable<List<Server>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponse<List<Server>>, List<Server>>() {
            @Override
            public List<Server> call(ServiceResponse<List<Server>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all servers.
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in alphabetical order.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Server&gt; object
     */
    public Observable<ServiceResponse<List<Server>>> listWithServiceResponseAsync() {
        return service.list()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Server>>>>() {
                @Override
                public Observable<ServiceResponse<List<Server>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Server>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Server>> listDelegate(Response<ResponseBody> response) throws MailosaurException, IOException {
        return this.client.restClient().responseBuilderFactory().<List<Server>, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<Server>>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Create a server.
     * Creates a new virtual SMTP server and returns it.
     *
     * @param serverCreateOptions the ServerCreateOptions value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Server object if successful.
     */
    public Server create(ServerCreateOptions serverCreateOptions) {
        return createWithServiceResponseAsync(serverCreateOptions).toBlocking().single().body();
    }

    /**
     * Create a server.
     * Creates a new virtual SMTP server and returns it.
     *
     * @param serverCreateOptions the ServerCreateOptions value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Server> createAsync(ServerCreateOptions serverCreateOptions, final ServiceCallback<Server> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(serverCreateOptions), serviceCallback);
    }

    /**
     * Create a server.
     * Creates a new virtual SMTP server and returns it.
     *
     * @param serverCreateOptions the ServerCreateOptions value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<Server> createAsync(ServerCreateOptions serverCreateOptions) {
        return createWithServiceResponseAsync(serverCreateOptions).map(new Func1<ServiceResponse<Server>, Server>() {
            @Override
            public Server call(ServiceResponse<Server> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a server.
     * Creates a new virtual SMTP server and returns it.
     *
     * @param serverCreateOptions the ServerCreateOptions value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<ServiceResponse<Server>> createWithServiceResponseAsync(ServerCreateOptions serverCreateOptions) {
        if (serverCreateOptions == null) {
            throw new IllegalArgumentException("Parameter serverCreateOptions is required and cannot be null.");
        }
        Validator.validate(serverCreateOptions);
        return service.create(serverCreateOptions)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Server>>>() {
                @Override
                public Observable<ServiceResponse<Server>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Server> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Server> createDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Server, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Server>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Retrieve a server.
     * Retrieves the detail for a single server. Simply supply the unique identifier for the required server.
     *
     * @param id The identifier of the server to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Server object if successful.
     */
    public Server get(String id) {
        return getWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Retrieve a server.
     * Retrieves the detail for a single server. Simply supply the unique identifier for the required server.
     *
     * @param id The identifier of the server to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Server> getAsync(String id, final ServiceCallback<Server> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Retrieve a server.
     * Retrieves the detail for a single server. Simply supply the unique identifier for the required server.
     *
     * @param id The identifier of the server to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<Server> getAsync(String id) {
        return getWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Server>, Server>() {
            @Override
            public Server call(ServiceResponse<Server> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve a server.
     * Retrieves the detail for a single server. Simply supply the unique identifier for the required server.
     *
     * @param id The identifier of the server to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<ServiceResponse<Server>> getWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.get(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Server>>>() {
                @Override
                public Observable<ServiceResponse<Server>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Server> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Server> getDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Server, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Server>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Update a server.
     * Updats a single server and returns it.
     *
     * @param id The identifier of the server to be updated.
     * @param server the Server value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Server object if successful.
     */
    public Server update(String id, Server server) {
        return updateWithServiceResponseAsync(id, server).toBlocking().single().body();
    }

    /**
     * Update a server.
     * Updats a single server and returns it.
     *
     * @param id The identifier of the server to be updated.
     * @param server the Server value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Server> updateAsync(String id, Server server, final ServiceCallback<Server> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(id, server), serviceCallback);
    }

    /**
     * Update a server.
     * Updats a single server and returns it.
     *
     * @param id The identifier of the server to be updated.
     * @param server the Server value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<Server> updateAsync(String id, Server server) {
        return updateWithServiceResponseAsync(id, server).map(new Func1<ServiceResponse<Server>, Server>() {
            @Override
            public Server call(ServiceResponse<Server> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a server.
     * Updats a single server and returns it.
     *
     * @param id The identifier of the server to be updated.
     * @param server the Server value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Server object
     */
    public Observable<ServiceResponse<Server>> updateWithServiceResponseAsync(String id, Server server) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        Validator.validate(server);
        return service.update(id, server)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Server>>>() {
                @Override
                public Observable<ServiceResponse<Server>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Server> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Server> updateDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Server, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Server>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Delete a server.
     * Permanently deletes a server. This operation cannot be undone. Also deletes all emails and associated attachments within the server.
     *
     * @param id The identifier of the server to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String id) {
        deleteWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Delete a server.
     * Permanently deletes a server. This operation cannot be undone. Also deletes all emails and associated attachments within the server.
     *
     * @param id The identifier of the server to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Delete a server.
     * Permanently deletes a server. This operation cannot be undone. Also deletes all emails and associated attachments within the server.
     *
     * @param id The identifier of the server to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String id) {
        return deleteWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a server.
     * Permanently deletes a server. This operation cannot be undone. Also deletes all emails and associated attachments within the server.
     *
     * @param id The identifier of the server to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.delete(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    private Random random = new Random();

    public String generateEmailAddress(String server) {
        String host = System.getenv("MAILOSAUR_SMTP_HOST");
        host = (host != null) ? host : "mailosaur.io";
        String randomString = String.valueOf(random.nextInt(10000000));
        return String.format("%s.%s@%s", randomString, server, host);    	
    }
}
