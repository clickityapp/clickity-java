/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.mailosaur.implementation;

import retrofit2.Retrofit;
import com.mailosaur.Files;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.InputStream;
import java.io.IOException;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Streaming;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Files.
 */
public class FilesImpl implements Files {
    /** The Retrofit service to perform REST calls. */
    private FilesService service;
    /** The service client containing this operation class. */
    private MailosaurBaseClientImpl client;

    /**
     * Initializes an instance of Files.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public FilesImpl(Retrofit retrofit, MailosaurBaseClientImpl client) {
        this.service = retrofit.create(FilesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Files to be
     * used by Retrofit to perform actually REST calls.
     */
    interface FilesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Files getAttachment" })
        @GET("api/files/attachments/{id}")
        @Streaming
        Observable<Response<ResponseBody>> getAttachment(@Path("id") UUID id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Files getEmail" })
        @GET("api/files/email/{id}")
        @Streaming
        Observable<Response<ResponseBody>> getEmail(@Path("id") UUID id);

    }

    /**
     * Download an attachment.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream getAttachment(UUID id) {
        return getAttachmentWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Download an attachment.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> getAttachmentAsync(UUID id, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(getAttachmentWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Download an attachment.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> getAttachmentAsync(UUID id) {
        return getAttachmentWithServiceResponseAsync(id).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download an attachment.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> getAttachmentWithServiceResponseAsync(UUID id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.getAttachment(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = getAttachmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> getAttachmentDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

    /**
     * Download raw.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the InputStream object if successful.
     */
    public InputStream getEmail(UUID id) {
        return getEmailWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Download raw.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<InputStream> getEmailAsync(UUID id, final ServiceCallback<InputStream> serviceCallback) {
        return ServiceFuture.fromResponse(getEmailWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Download raw.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<InputStream> getEmailAsync(UUID id) {
        return getEmailWithServiceResponseAsync(id).map(new Func1<ServiceResponse<InputStream>, InputStream>() {
            @Override
            public InputStream call(ServiceResponse<InputStream> response) {
                return response.body();
            }
        });
    }

    /**
     * Download raw.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param id The identifier of the file to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the InputStream object
     */
    public Observable<ServiceResponse<InputStream>> getEmailWithServiceResponseAsync(UUID id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.getEmail(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<InputStream>>>() {
                @Override
                public Observable<ServiceResponse<InputStream>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<InputStream> clientResponse = getEmailDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<InputStream> getEmailDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<InputStream, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<InputStream>() { }.getType())
                .build(response);
    }

}
