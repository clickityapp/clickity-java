/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.mailosaur.implementation;

import retrofit2.Retrofit;
import com.mailosaur.Emails;
import com.google.common.reflect.TypeToken;
import com.mailosaur.models.Email;
import com.mailosaur.MailosaurException;
import com.mailosaur.models.SearchCriteria;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Emails.
 */
public class EmailsImpl implements Emails {
    /** The Retrofit service to perform REST calls. */
    private EmailsService service;
    /** The service client containing this operation class. */
    private MailosaurBaseClientImpl client;

    /**
     * Initializes an instance of Emails.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EmailsImpl(Retrofit retrofit, MailosaurBaseClientImpl client) {
        this.service = retrofit.create(EmailsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Emails to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EmailsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails get" })
        @GET("api/emails/{id}")
        Observable<Response<ResponseBody>> get(@Path("id") UUID id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails delete" })
        @HTTP(path = "api/emails/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("id") UUID id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails list" })
        @GET("api/emails")
        Observable<Response<ResponseBody>> list(@Query("server") String server, @Query("pagenumber") Integer pagenumber, @Query("itemsperpage") Integer itemsperpage);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails deleteAll" })
        @HTTP(path = "api/emails", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteAll(@Query("server") String server);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails search" })
        @POST("api/emails/search")
        Observable<Response<ResponseBody>> search(@Query("server") String server, @Body SearchCriteria criteria, @Query("pagenumber") Integer pagenumber, @Query("itemsperpage") Integer itemsperpage);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.mailosaur.Emails waitFor" })
        @POST("api/emails/await")
        Observable<Response<ResponseBody>> waitFor(@Query("server") String server, @Body SearchCriteria criteria);

    }

    /**
     * Retrieve an email.
     * Retrieves the detail for a single email. Simply supply the unique identifier for the required email.
     *
     * @param id The identifier of the email to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Email object if successful.
     */
    public Email get(UUID id) {
        return getWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Retrieve an email.
     * Retrieves the detail for a single email. Simply supply the unique identifier for the required email.
     *
     * @param id The identifier of the email to be retrieved.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Email> getAsync(UUID id, final ServiceCallback<Email> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Retrieve an email.
     * Retrieves the detail for a single email. Simply supply the unique identifier for the required email.
     *
     * @param id The identifier of the email to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Email object
     */
    public Observable<Email> getAsync(UUID id) {
        return getWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Email>, Email>() {
            @Override
            public Email call(ServiceResponse<Email> response) {
                return response.body();
            }
        });
    }

    /**
     * Retrieve an email.
     * Retrieves the detail for a single email. Simply supply the unique identifier for the required email.
     *
     * @param id The identifier of the email to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Email object
     */
    public Observable<ServiceResponse<Email>> getWithServiceResponseAsync(UUID id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.get(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Email>>>() {
                @Override
                public Observable<ServiceResponse<Email>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Email> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Email> getDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Email, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Email>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Delete an email.
     * Permanently deletes an email. This operation cannot be undone. Also deletes any attachments related to the email.
     *
     * @param id The identifier of the email to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(UUID id) {
        deleteWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Delete an email.
     * Permanently deletes an email. This operation cannot be undone. Also deletes any attachments related to the email.
     *
     * @param id The identifier of the email to be deleted.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(UUID id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Delete an email.
     * Permanently deletes an email. This operation cannot be undone. Also deletes any attachments related to the email.
     *
     * @param id The identifier of the email to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(UUID id) {
        return deleteWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an email.
     * Permanently deletes an email. This operation cannot be undone. Also deletes any attachments related to the email.
     *
     * @param id The identifier of the email to be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(UUID id) {
        if (id == null) {
            throw new IllegalArgumentException("Parameter id is required and cannot be null.");
        }
        return service.delete(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Email&gt; object if successful.
     */
    public List<Email> list(String server) {
        return listWithServiceResponseAsync(server).toBlocking().single().body();
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Email>> listAsync(String server, final ServiceCallback<List<Email>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(server), serviceCallback);
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<List<Email>> listAsync(String server) {
        return listWithServiceResponseAsync(server).map(new Func1<ServiceResponse<List<Email>>, List<Email>>() {
            @Override
            public List<Email> call(ServiceResponse<List<Email>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<ServiceResponse<List<Email>>> listWithServiceResponseAsync(String server) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        final Integer pagenumber = null;
        final Integer itemsperpage = null;
        return service.list(server, pagenumber, itemsperpage)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Email>>>>() {
                @Override
                public Observable<ServiceResponse<List<Email>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Email>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Email&gt; object if successful.
     */
    public List<Email> list(String server, Integer pagenumber, Integer itemsperpage) {
        return listWithServiceResponseAsync(server, pagenumber, itemsperpage).toBlocking().single().body();
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Email>> listAsync(String server, Integer pagenumber, Integer itemsperpage, final ServiceCallback<List<Email>> serviceCallback) {
        return ServiceFuture.fromResponse(listWithServiceResponseAsync(server, pagenumber, itemsperpage), serviceCallback);
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<List<Email>> listAsync(String server, Integer pagenumber, Integer itemsperpage) {
        return listWithServiceResponseAsync(server, pagenumber, itemsperpage).map(new Func1<ServiceResponse<List<Email>>, List<Email>>() {
            @Override
            public List<Email> call(ServiceResponse<List<Email>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all emails.
     * Returns a list of your emails. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<ServiceResponse<List<Email>>> listWithServiceResponseAsync(String server, Integer pagenumber, Integer itemsperpage) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        return service.list(server, pagenumber, itemsperpage)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Email>>>>() {
                @Override
                public Observable<ServiceResponse<List<Email>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Email>> clientResponse = listDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Email>> listDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<Email>, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<Email>>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Delete all emails.
     * Permanently deletes all emails held by the specified server. This operation cannot be undone. Also deletes any attachments related to each email.
     *
     * @param server The identifier of the server to be emptied.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteAll(String server) {
        deleteAllWithServiceResponseAsync(server).toBlocking().single().body();
    }

    /**
     * Delete all emails.
     * Permanently deletes all emails held by the specified server. This operation cannot be undone. Also deletes any attachments related to each email.
     *
     * @param server The identifier of the server to be emptied.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAllAsync(String server, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteAllWithServiceResponseAsync(server), serviceCallback);
    }

    /**
     * Delete all emails.
     * Permanently deletes all emails held by the specified server. This operation cannot be undone. Also deletes any attachments related to each email.
     *
     * @param server The identifier of the server to be emptied.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAllAsync(String server) {
        return deleteAllWithServiceResponseAsync(server).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete all emails.
     * Permanently deletes all emails held by the specified server. This operation cannot be undone. Also deletes any attachments related to each email.
     *
     * @param server The identifier of the server to be emptied.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteAllWithServiceResponseAsync(String server) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        return service.deleteAll(server)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteAllDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteAllDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Email&gt; object if successful.
     */
    public List<Email> search(String server, SearchCriteria criteria) {
        return searchWithServiceResponseAsync(server, criteria).toBlocking().single().body();
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Email>> searchAsync(String server, SearchCriteria criteria, final ServiceCallback<List<Email>> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(server, criteria), serviceCallback);
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<List<Email>> searchAsync(String server, SearchCriteria criteria) {
        return searchWithServiceResponseAsync(server, criteria).map(new Func1<ServiceResponse<List<Email>>, List<Email>>() {
            @Override
            public List<Email> call(ServiceResponse<List<Email>> response) {
                return response.body();
            }
        });
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<ServiceResponse<List<Email>>> searchWithServiceResponseAsync(String server, SearchCriteria criteria) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        if (criteria == null) {
            throw new IllegalArgumentException("Parameter criteria is required and cannot be null.");
        }
        Validator.validate(criteria);
        final Integer pagenumber = null;
        final Integer itemsperpage = null;
        return service.search(server, criteria, pagenumber, itemsperpage)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Email>>>>() {
                @Override
                public Observable<ServiceResponse<List<Email>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Email>> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;Email&gt; object if successful.
     */
    public List<Email> search(String server, SearchCriteria criteria, Integer pagenumber, Integer itemsperpage) {
        return searchWithServiceResponseAsync(server, criteria, pagenumber, itemsperpage).toBlocking().single().body();
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<Email>> searchAsync(String server, SearchCriteria criteria, Integer pagenumber, Integer itemsperpage, final ServiceCallback<List<Email>> serviceCallback) {
        return ServiceFuture.fromResponse(searchWithServiceResponseAsync(server, criteria, pagenumber, itemsperpage), serviceCallback);
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<List<Email>> searchAsync(String server, SearchCriteria criteria, Integer pagenumber, Integer itemsperpage) {
        return searchWithServiceResponseAsync(server, criteria, pagenumber, itemsperpage).map(new Func1<ServiceResponse<List<Email>>, List<Email>>() {
            @Override
            public List<Email> call(ServiceResponse<List<Email>> response) {
                return response.body();
            }
        });
    }

    /**
     * Search for emails.
     * Returns a list of emails matching the specified search criteria. The emails are returned sorted by received date, with the most recently-received emails appearing first.
     *
     * @param server The identifier of the server hosting the emails.
     * @param criteria The search criteria to match results against.
     * @param pagenumber Used in conjunction with `itemsperpage` to support pagination.
     * @param itemsperpage A limit on the number of results to be returned. Can be set between 1 and 1000 items, the default is 50.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;Email&gt; object
     */
    public Observable<ServiceResponse<List<Email>>> searchWithServiceResponseAsync(String server, SearchCriteria criteria, Integer pagenumber, Integer itemsperpage) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        if (criteria == null) {
            throw new IllegalArgumentException("Parameter criteria is required and cannot be null.");
        }
        Validator.validate(criteria);
        return service.search(server, criteria, pagenumber, itemsperpage)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<Email>>>>() {
                @Override
                public Observable<ServiceResponse<List<Email>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<Email>> clientResponse = searchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<Email>> searchDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<List<Email>, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<List<Email>>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

    /**
     * Wait for a specific email.
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param server The identifier of the server hosting the email.
     * @param criteria The search criteria to use in order to find a match.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MailosaurException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Email object if successful.
     */
    public Email waitFor(String server, SearchCriteria criteria) {
        return waitForWithServiceResponseAsync(server, criteria).toBlocking().single().body();
    }

    /**
     * Wait for a specific email.
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param server The identifier of the server hosting the email.
     * @param criteria The search criteria to use in order to find a match.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Email> waitForAsync(String server, SearchCriteria criteria, final ServiceCallback<Email> serviceCallback) {
        return ServiceFuture.fromResponse(waitForWithServiceResponseAsync(server, criteria), serviceCallback);
    }

    /**
     * Wait for a specific email.
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param server The identifier of the server hosting the email.
     * @param criteria The search criteria to use in order to find a match.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Email object
     */
    public Observable<Email> waitForAsync(String server, SearchCriteria criteria) {
        return waitForWithServiceResponseAsync(server, criteria).map(new Func1<ServiceResponse<Email>, Email>() {
            @Override
            public Email call(ServiceResponse<Email> response) {
                return response.body();
            }
        });
    }

    /**
     * Wait for a specific email.
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param server The identifier of the server hosting the email.
     * @param criteria The search criteria to use in order to find a match.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Email object
     */
    public Observable<ServiceResponse<Email>> waitForWithServiceResponseAsync(String server, SearchCriteria criteria) {
        if (server == null) {
            throw new IllegalArgumentException("Parameter server is required and cannot be null.");
        }
        if (criteria == null) {
            throw new IllegalArgumentException("Parameter criteria is required and cannot be null.");
        }
        Validator.validate(criteria);
        return service.waitFor(server, criteria)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Email>>>() {
                @Override
                public Observable<ServiceResponse<Email>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Email> clientResponse = waitForDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Email> waitForDelegate(Response<ResponseBody> response) throws MailosaurException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Email, MailosaurException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Email>() { }.getType())
                .registerError(MailosaurException.class)
                .build(response);
    }

}
